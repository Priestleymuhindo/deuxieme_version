urchins$regime_alim <- fct_recode(urchins$regime_alim ,
"initial" ="Initial",
"Pauvre" ="Low ",
"Riche" ="High")
View(urchins)
urchins <-read_csv("https://tidymodels.org/start/models/urchins.csv") %>% setNames(c("regime_alim","volume_initial","largeur")) %>%
mutate(regime_alim=factor(regime_alim))
urchins$regime_alim <- fct_recode(urchins$regime_alim ,
"initial" ="Initial",
"Pauvre" ="Low ",
"Riche" ="High")
View(urchins)
urchins$regime_alim <- fct_recode(urchins$regime_alim ,
"initial" = "Initial",
"Pauvre" = "Low ",
"Riche" = "High")
urchins$regime_alim <- fct_recode(urchins$regime_alim ,
"initial" = "Initial",
"Pauvre" = "Low",
"Riche" = "High")
View(urchins)
urchins <-read_csv("https://tidymodels.org/start/models/urchins.csv") %>% setNames(c("regime_alim","taille","largeur")) %>%
mutate(regime_alim=factor(regime_alim))
urchins$regime_alim <- fct_recode(urchins$regime_alim ,
"initial" = "Initial",
"Pauvre" = "Low",
"Riche" = "High")
View(urchins)
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)+
geom_smooth(method = "lm",se=F)
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)+
geom_smooth(method = "lm",se=F)+
theme_bw()
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)+
geom_smooth(method = "lm",se=F)+
theme_bw()+
labs(title = "regression de la taille des ursins \nen fonction de la largeur de leurs largeurs par régime alimentaire")
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)+
geom_smooth(method = "lm",se=F)+
theme_bw()+
labs(title = "regression de la taille des ursins \nen fonction de la largeur de leurs largeurs \npar régime alimentaire")
largeur=taille*regime_alim
attach(urchins)
largeur=taille*regime_alim
largeur=taille*regime_alim
lm_mod <-
linear_reg() %>% # Précision du modèle
set_engine("lm") # Précision du package
lm_mod
urchins
largeur=taille*regime_alim
lm_mod <-
linear_reg() %>% # Précision du modèle
set_engine("lm") # Précision du package
urchins <- urchins
largeur=taille*regime_alim
lm_mod <-
linear_reg() %>% # Précision du modèle
set_engine("lm") # Précision du package
urchins <- urchins
largeur=taille*regime_alim
lm_mod <-
linear_reg() %>% # Précision du modèle
set_engine("lm") # Précision du package
lm_mod <-
linear_reg() %>% # Précision du modèle
set_engine("lm") # Précision du package
lm_fit <- lm_mod %>% fit(taille*largeur~regime_alim,data=urchins)
lm_fit
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins)
lm_fit
tidy(lm_fit)
tidy(lm_fit) %>% data.table::data.table()
tidy(lm_fit) %>% DT::datatable()
tidy(lm_fit) %>% DT::datatable(style = "bootsrap4")
tidy(lm_fit) %>% DT::datatable(style = "bootstrap4")
tidy(lm_fit) %>% DT::datatable(style = "bootstrap")
tidy(lm_fit) %>% DT::datatable(style = "")
tidy(lm_fit) %>% DT::datatable(style = "jqueryui")
lm_fit <- tidy(lm_fit) %>% DT::datatable(style = "jqueryui")
lm_fit %>% dwplot()
tidy(lm_fit) %>% DT::datatable(style = "jqueryui")
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins)
tidy(lm_fit) %>% DT::datatable(style = "jqueryui")
tidy(lm_fit) %>% dwplot()
tidy(lm_fit) %>% dwplot(whisker_args = list(color=black)
tidy(lm_fit) %>% dwplot(whisker_args = list(color=black))
tidy(lm_fit) %>% dwplot(whisker_args = list(color=black))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black",theme="bw"))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black",theme="b_w"))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black",theme_bw()))
?dwplot
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker", "distribution"))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c( "distribution"))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green"))
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green"))+theme_bw()
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=2))+theme_bw()
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()
geom_vline()
urchins_train <- initial_split(data=urchins,prop = 0.8)
urchins_train <- initial_split(data=urchins,prop = 0.8)
urchins_train_d <- training(urchins_train)
urchins_train_d
urchins_train <- initial_split(data=urchins,prop = 0.8)
urchins_train_d <- training(urchins_train)
urchins_test_d <- testing(urchins_train)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
tidy(lm_fit) %>% DT::datatable(style = "jqueryui")
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()
?predict
?fct_relevel
urchins$regime_alim <- fct_relevel(urchins$regime_alim,
"initial","Pauvre","Riche")
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)+
geom_smooth(method = "lm",se=F)+
theme_bw()+
labs(title = "Regréssion de la taille des ursins \nen fonction de la largeur de leurs largeurs \npar régime alimentaire")
urchins_train <- initial_split(data=urchins,prop = 0.8)
urchins_train_d <- training(urchins_train)
urchins_test_d <- testing(urchins_train)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
tidy(lm_fit) %>% DT::datatable(style = "jqueryui")
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()+theme(legend.position = None)
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()+theme(legend.position = "None")
tidy(lm_fit) %>% DT::datatable(buttons=c("copy","csv","excel","pdf","print"))
tidy(lm_fit) %>% DT::datatable(extensions = "Buttons",buttons=c("copy","csv","excel","pdf","print"))
tidy(lm_fit) %>% DT::datatable(rownames = F,extensions = "Buttons",buttons=c("copy","csv","excel","pdf","print"))
tidy(lm_fit) %>%
DT::datatable(selections="none",rownames = F,extensions = "Buttons",buttons=c("copy","csv","excel","pdf","print"))
install.packages("DT")
tidy(lm_fit) %>%
DT::datatable(selections="none",rownames = F,extensions = "Buttons",buttons=c("copy","csv","excel","pdf"))
library(DT)
?datatable()
tidy(lm_fit) %>%
DT::datatable(selections="none",rownames = F,extensions = "buttons",buttons=c("copy","csv","excel","pdf"))
starwars %>%
datatable(rownames = FALSE,
extensions = c("Scroller", "FixedColumns", "Buttons", "Select"),
selection = "none",
options = list(
dom = "Bfrtip",
# scroll :
scrollY = 200, scrollX = 400, scroller = TRUE,
# fixer les colonnes :
fixedColumns = list(leftColumns = 1),
# selection :
select = list(style = 'os', items = 'row'),
buttons = c(
# enregistrements
'copy', 'csv', 'excel', 'pdf', 'print',
# visualisation des colonnes
'colvis',
# selection des elements
'selectAll', 'selectNone', 'selectRows', 'selectColumns', 'selectCells'
)
)
)
tidy(lm_fit) %>%
datatable(rownames = FALSE,
extensions = c("Scroller", "FixedColumns", "Buttons", "Select"),
selection = "none",
options = list(
dom = "Bfrtip",
# scroll :
scrollY = 200, scrollX = 400, scroller = TRUE,
# fixer les colonnes :
fixedColumns = list(leftColumns = 1),
# selection :
select = list(style = 'os', items = 'row'),
buttons = c(
# enregistrements
'copy', 'csv', 'excel', 'pdf', 'print',
# visualisation des colonnes
'colvis',
# selection des elements
'selectAll', 'selectNone', 'selectRows', 'selectColumns', 'selectCells'
)
)
)
library(tidymodels)
library(readr)
library(broom.mixed) # convertir les résultats en tibble
library(dotwhisker) # Visualisation de données
library(forcats)
library(DT)
urchins <-read_csv("https://tidymodels.org/start/models/urchins.csv") %>% setNames(c("regime_alim","taille","largeur")) %>%
mutate(regime_alim=factor(regime_alim))
urchins$regime_alim <- fct_recode(urchins$regime_alim ,
"initial" = "Initial",
"Pauvre" = "Low",
"Riche" = "High")
urchins$regime_alim <- fct_relevel(urchins$regime_alim,
"initial","Pauvre","Riche")
urchins %>% datatable(rownames = FALSE,
extensions = c("Scroller", "FixedColumns", "Buttons", "Select"),
selection = "none",
options = list(
dom = "Bfrtip",
# scroll :
scrollY = 200, scrollX = 400, scroller = TRUE,
# fixer les colonnes :
fixedColumns = list(leftColumns = 1),
# selection :
select = list(style = 'os', items = 'row'),
buttons = c(
# enregistrements
'copy', 'csv', 'excel', 'pdf', 'print',
# visualisation des colonnes
'colvis',
# selection des elements
'selectAll', 'selectNone', 'selectRows', 'selectColumns', 'selectCells'
)
)
)
ggplot(urchins,
aes(x=taille,y=largeur,group=regime_alim,color=regime_alim))+
geom_point(size=3)+
geom_smooth(method = "lm",se=F)+
theme_bw()+
labs(title = "Regréssion de la taille des ursins \nen fonction de la largeur de leurs largeurs \npar régime alimentaire")
newdata <- expand.grid(taille=20,
regime_alim=c("initial","Pauvre","Riche"))
newdata <- expand.grid(taille=20,
regime_alim=c("initial","Pauvre","Riche"))
predict(lm_fit,new_data = new_data)
predict(lm_fit,new_data = newdata)
predict(lm_fit,new_data = newdata,type = "conf_int")
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata_conf <- predict(lm_fit,new_data = newdata)
newdata_moy <- predict(lm_fit,new_data = newdata)
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata_moy
newdata %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
newdata_moy <- predict(lm_fit,new_data = newdata,type = )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
newdata_moy <- predict(lm_fit,new_data = newdata,type = )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
newdata
newdata_moy <- predict(lm_fit,new_data = newdata )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
names(newdata)
newdata
newdata_moy
newdata_conf
newdata_conf %>% bind_cols(newdata_moy)
newdata <- expand.grid(taille=20,
regime_alim=c("initial","Pauvre","Riche"))
newdata_conf %>% bind_cols(newdata_moy) %>% newdata
newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
newdata_moy <- predict(lm_fit,new_data = newdata )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
newdata
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred))+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred))+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))+
theme_bw()
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred),color="red")+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))+
theme_bw()
newdata_moy <- predict(lm_fit,new_data = urchins_test_d )
newdata_conf <- predict(lm_fit,new_data = urchins_test_d,type = "conf_int")
newdata <- newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
newdata_conf
newdata_moy <- predict(lm_fit,new_data = urchins_test_d )
newdata_conf <- predict(lm_fit,new_data = urchins_test_d,type = "conf_int")
newdata <- urchins_test_d %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
newdata_moy <- predict(lm_fit,new_data = urchins_test_d )
newdata_conf <- predict(lm_fit,new_data = urchins_test_d,type = "conf_int")
newdata <- urchins_test_d %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
newdata_moy <- predict(lm_fit,new_data = urchins_test_d )
newdata_conf <- predict(lm_fit,new_data = urchins_test_d,type = "conf_int")
newdata <- urchins_test_d %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred),color="red")+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
newdata_moy <- predict(lm_fit,new_data = newdata )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
newdata_moy <- predict(lm_fit,new_data = newdata )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred),color="red")+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
newdata <- expand.grid(taille=20,
regime_alim=c("initial","Pauvre","Riche"))
newdata_moy <- predict(lm_fit,new_data = newdata )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred),color="red")+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
newdata_moy <- predict(lm_fit,new_data = urchins_test_d )
newdata_conf <- predict(lm_fit,new_data = urchins_test_d,type = "conf_int")
newdata <- urchins_test_d %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
newdata %>% group_by(regime_alim) %>% summarise(moy=mean(.pred_lower))
newdata %>% group_by(regime_alim) %>% summarise(moy_pred_lower=mean(.pred_lower),moy_pred_upper=mean(.pred_upper),moy_pre=mean(.pred))
newdata <- newdata %>% group_by(regime_alim) %>% summarise(moy_pred_lower=mean(.pred_lower),moy_pred_upper=mean(.pred_upper),moy_pre=mean(.pred))
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=moy_pre),color="red")+
geom_errorbar(aes(ymin=moy_pred_lower,ymax=.moy_pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
newdata <- newdata %>% group_by(regime_alim) %>% summarise(moy_pred_lower=mean(.pred_lower),moy_pred_upper=mean(.pred_upper),moy_pre=mean(.pred)) %>% ungroup()
newdata <- expand.grid(taille=20,
regime_alim=c("initial","Pauvre","Riche"))
newdata_moy <- predict(lm_fit,new_data = newdata )
newdata_conf <- predict(lm_fit,new_data = newdata,type = "conf_int")
newdata <- newdata_conf %>% bind_cols(newdata_moy) %>% bind_cols(newdata)
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=.pred),color="red")+
geom_errorbar(aes(ymin=.pred_lower,ymax=.pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
newdata_moy <- predict(lm_fit,new_data = urchins_test_d )
newdata_conf <- predict(lm_fit,new_data = urchins_test_d,type = "conf_int")
newdata <- urchins_test_d %>% bind_cols(newdata_moy) %>% bind_cols(newdata_conf)
newdata <- newdata %>% group_by(regime_alim) %>% summarise(moy_pred_lower=mean(.pred_lower),moy_pred_upper=mean(.pred_upper),moy_pre=mean(.pred)) %>% ungroup()
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=moy_pre),color="red")+
geom_errorbar(aes(ymin=moy_pred_lower,ymax=.moy_pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
ggplot(newdata,aes(x=regime_alim))+
geom_point(aes(y=moy_pre),color="red")+
geom_errorbar(aes(ymin=moy_pred_lower,ymax=moy_pred_upper))+
labs(y="largeur des oursins")+
theme_bw()
libra
install.packages("rstanarm")
lm_fit
summary(lm_fit)
summary(lm_fit)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit)
lm_mod <-
linear_reg() %>% # Précision du modèle
set_engine("lm") # Précision du package
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit$fit)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit$preproc)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit$spec)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit$elapsed)
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit$fit)
summary(lm_fit$fit) %>% tidy()
summary(lm_fit$fit)
summary(lm_fit$fit) %>% gtsummary::tbl_summary()
summary(lm_fit$fit) %>% gtsummary::tbl_regression()
lm_fit <- lm_mod %>% fit(largeur~taille*regime_alim,data=urchins_train_d)
summary(lm_fit$fit)
par(mfrow=c(2,2))
plot(lm_fit$fit)
par(mfrow=c(2,2))
plot(lm_fit$fit,pch=16,col="#006EA1")
library(forestmodel)
forest_model(lm_fit$fit)
forest_model(lm_fit$fit,return_data = T)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red"))
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"))
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_bw())
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_clean())
library(ggthemes)
library(forestmodel)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_clean())
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_clean())
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_clean(),breaks = T)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_forest(),breaks = T)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_forest(),breaks = T,legend=T)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_forest(),breaks = T)
forest_model(lm_fit$fit,format_options = forest_model_format_options(colour = "red",color = "green"),recalculate_width = T,recalculate_height = T,theme = theme_forest(),breaks = T,factor_separate_line = T)
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()+theme(legend.position = "None")
library(tidymodels)
library(readr)
library(broom.mixed) # convertir les résultats en tibble
library(dotwhisker) # Visualisation de données
library(forcats)
library(DT)
library(forestmodel)
library(ggthemes)
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()+theme(legend.position = "None")
tidy(lm_fit) %>% dwplot(whisker_args = list(color="black"),
style = c("dotwhisker"),
vline = geom_vline(xintercept = 0,
colour="green",linetype=3))+theme_bw()+theme(legend.position = "None")
library(tidymodels)
library(readr)
library(broom.mixed) # convertir les résultats en tibble
library(dotwhisker) # Visualisation de données
library(forcats)
library(DT)
library(forestmodel)
library(ggthemes)
urchins_train <- initial_split(data=urchins,prop = 0.8)
urchins_train_d <- training(urchins_train)
urchins_test_d <- testing(urchins_train)
install.packages("mailR")
install.packages("matpow")
??matpow
glance(lm_fit)
vip(lm_fit)
library(tidymodels)
library(readr)
library(broom.mixed) # convertir les résultats en tibble
library(dotwhisker) # Visualisation de données
library(forcats)
library(DT)
library(forestmodel)
library(ggthemes)
vip(lm_fit)
broom.mixed::augment(lm_fit)
install.packages(c("vip", "vipor"))
install.packages("snn")
library(vip)
library(snn)
data('Hepta')
out=SharedNearestNeighborClustering(
Hepta$Data, Knn=7,Radius=NULL,minPts=NULL,PlotIt = FALSE)
install.packages("iml")
library(tidymodels)
library(vip)
library(readr)
library(broom.mixed) # convertir les résultats en tibble
library(dotwhisker) # Visualisation de données
library(forcats)
library(DT)
library(forestmodel)
library(ggthemes)
vip(lm_fit)
?vip
vip(lm_fit,geom="boxplot")
vip(lm_fit)+theme_bw()
library(khroma)
library(khroma)
vip(lm_fit)+theme_bw()+scale_fill_broc()
vip(lm_fit)+theme_bw()+scale_bright_fill()
vip(lm_fit)+theme_bw()+scale_fill_bright()
vip(lm_fit)+theme_bw()+scale_color_manual(values = "red")
vip(lm_fit)+theme_bw()+scale_color_manual(values = colors()[112])
vip(lm_fit)+theme_bw()+scale_color_manual(values = colors()[114])
vip(lm_fit,color="red")+theme_bw()+scale_color_manual(values = colors()[114])
vip(lm_fit,aesthetics=list(color="red"))+theme_bw()+scale_color_manual(values = colors()[114])
vip(lm_fit,aesthetics=list(fill="red"))+theme_bw()+scale_color_manual(values = colors()[114])
